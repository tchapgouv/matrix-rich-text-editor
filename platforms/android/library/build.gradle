import com.vanniktech.maven.publish.SonatypeHost

plugins {
    // Rust
    id 'org.mozilla.rust-android-gradle.rust-android'

    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'

    alias libs.plugins.jacoco.android
    alias libs.plugins.maven.publish
    alias libs.plugins.compose.compiler
}

if (project.hasProperty("coverage")) {
    apply plugin: 'jacoco'
}

cargo {
    module = "../../../bindings/wysiwyg-ffi"    // The directory which contains Cargo.toml
    libname = "uniffi-wysiwyg-composer"         // The Cargo.toml's [package] name.
    targets = ["arm", "x86", "x86_64", "arm64"]
    targetIncludes = ["libuniffi_wysiwyg_composer.so"]
    targetDirectory = '../../../target'
    prebuiltToolchains = true
}

android {
    namespace = "io.element.android.wysiwyg"
    testNamespace = "io.element.android.wysiwyg.test"

    compileSdk 34

    defaultConfig {
        minSdk 21
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildFeatures {
        buildConfig = true
        compose true // Enable classes to be marked as stable
    }

    testOptions {
        // Disables animations during instrumented tests you run from the command line…
        // This property does not affect tests that you run using Android Studio.”
        animationsDisabled = true

        unitTests {
            includeAndroidResources = true
        }
    }

    testCoverage {
        jacocoVersion = "0.8.8"
    }

    packagingOptions {
        resources.excludes += 'META-INF/LICENSE.md'
        resources.excludes += 'META-INF/LICENSE-notice.md'
    }

    ndkVersion getNdkVersionAsWorkaround()
}

kotlin {
    jvmToolchain(11)
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs_nio:2.1.5'

    implementation "net.java.dev.jna:jna:5.15.0@aar"

    implementation libs.kotlin.coroutines.android
    implementation libs.kotlin.coroutines

    implementation libs.timber

    // HTML Parsing
    api libs.jsoup

    implementation libs.androidx.core
    implementation libs.androidx.appcompat
    implementation libs.androidx.lifecycle.viewmodel
    api libs.google.material
    implementation libs.androidx.constraintlayout
    implementation platform(libs.androidx.compose.bom)
    implementation 'androidx.compose.runtime:runtime'
    testImplementation libs.test.junit
    testImplementation libs.test.robolectric
    testImplementation libs.test.mockk
    testImplementation libs.test.hamcrest
    androidTestImplementation project(":test")
    androidTestImplementation libs.test.androidx.junit
    androidTestImplementation libs.test.androidx.espresso
    androidTestImplementation libs.test.androidx.espresso.accessibility
    androidTestImplementation libs.test.mockk.android
    androidTestImplementation libs.test.androidx.uiautomator
}

android.libraryVariants.all { variant ->
    def generateBindingTasks = tasks.register("generate${variant.name.capitalize()}UniFFIBindings", Exec) {
        workingDir "${project.projectDir}"
        // Note: arbitrary using the first target directory, but any of the dylib could be used.
        def targetDir = project.tasks.withType(com.nishtahir.CargoBuildTask).first().toolchain.folder
        commandLine 'cargo', 'uniffi-bindgen', 'generate', '--library', "${buildDir}/rustJniLibs/${targetDir}/libuniffi_wysiwyg_composer.so", '--language', 'kotlin', '--out-dir', "${buildDir}/generated/source/uniffi/${variant.name}/java"
        dependsOn("cargoBuild")
    }
    tasks.preBuild.dependsOn(generateBindingTasks)
    def sourceSet = variant.sourceSets.find { it.name == variant.name }
    sourceSet.java.srcDir new File(buildDir, "generated/source/uniffi/${variant.name}/java")
}

afterEvaluate {
    def taskName = getGradle().getStartParameter().getTaskRequests().toString()
    def isReleaseBuild = taskName.containsIgnoreCase("release") || taskName.containsIgnoreCase("publish")
    if (isReleaseBuild) {
        cargo.profile = "release"
    } else {
        cargo.profile = "debug"
        cargo.features {
            defaultAnd("assert-invariants")
        }
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Workaround for https://github.com/mozilla/rust-android-gradle/issues/46
// This looks for the NDK path like: '/some/path/to/sdk/ndk/23.0.7599858'
// and takes the last path component, which should be the version number
def getNdkVersionAsWorkaround() {
    def ndkDirectory = new File(android.sdkDirectory, "ndk")
    return ndkDirectory.list().sort().last().split(PATH_SEPARATOR).last()
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.S01)
    signAllPublications()

    coordinates(property("MAVEN_GROUP"), property("POM_ARTIFACT_ID"), property("MAVEN_VERSION_NAME"))
    if (!providers.gradleProperty("mavenCentralUsername")) {
        println("No maven central provider")
    }
    pom {
        name = "Matrix Rich Text Editor"
        description.set("Cross-platform rich text editor that generates HTML output.")
        inceptionYear.set("2022")
        url.set("https://github.com/element-hq/matrix-rich-text-editor")
        licenses {
            license {
                name.set("GNU Affero General Public License (AGPL) version 3.0")
                url.set("https://www.gnu.org/licenses/agpl-3.0.txt")
                distribution.set("https://www.gnu.org/licenses/agpl-3.0.txt")
            }
            license {
                name.set("Element Commercial License")
                url.set("https://raw.githubusercontent.com/element-hq/matrix-rich-text-editor/refs/heads/main/LICENSE-COMMERCIAL")
                distribution.set("https://raw.githubusercontent.com/element-hq/matrix-rich-text-editor/refs/heads/main/LICENSE-COMMERCIAL")
            }
        }
        developers {
            developer {
                id.set("matrixdev")
                name.set("matrixdev")
                url.set("https://github.com/element-hq/")
                email.set("android@element.io")
            }
        }
        scm {
            url.set("https://github.com/element-hq/matrix-rich-text-editor/")
            connection.set("scm:git:git://github.com/element-hq/matrix-rich-text-editor.git")
            developerConnection.set("scm:git:ssh://git@github.com/element-hq/matrix-rich-text-editor.git")
        }
    }
}